-- Users table
create table if not exists public."Users" (
  id bigint generated by default as identity primary key,
  email text unique not null,
  created_at timestamptz not null default now()
);

-- Messages table (per-user scoped)
create table if not exists public.messages (
  id bigint generated by default as identity primary key,
  role text not null check (role in ('user','assistant')),
  content text not null,
  user_email text not null,
  created_at timestamptz not null default now()
);

-- Enable RLS
alter table public.messages enable row level security;

-- Conditionally create indexes only if the user_email column exists (for idempotency)
DO $$
BEGIN
  IF EXISTS (
    SELECT 1 FROM information_schema.columns
    WHERE table_schema = 'public' AND table_name = 'messages' AND column_name = 'user_email'
  ) THEN
    CREATE INDEX IF NOT EXISTS idx_messages_user_email ON public.messages(user_email);
    CREATE INDEX IF NOT EXISTS idx_messages_user_email_created_at ON public.messages(user_email, created_at);
  END IF;
END $$;

-- Conditionally create policies only if the user_email column exists (for idempotency)
DO $$
BEGIN
  IF EXISTS (
    SELECT 1 FROM information_schema.columns
    WHERE table_schema = 'public' AND table_name = 'messages' AND column_name = 'user_email'
  ) THEN
    -- Policies using PostgREST header x-user-email
    -- Supabase exposes request headers via current_setting('request.headers.<name>', true)
    IF NOT EXISTS (
      SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'messages' AND policyname = 'Users can read own'
    ) THEN
      CREATE POLICY "Users can read own" ON public.messages
        FOR SELECT USING (user_email = current_setting('request.headers.x-user-email', true));
    END IF;

    IF NOT EXISTS (
      SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'messages' AND policyname = 'Users can write own'
    ) THEN
      CREATE POLICY "Users can write own" ON public.messages
        FOR INSERT WITH CHECK (user_email = current_setting('request.headers.x-user-email', true));
    END IF;

    IF NOT EXISTS (
      SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'messages' AND policyname = 'Users can delete own'
    ) THEN
      CREATE POLICY "Users can delete own" ON public.messages
        FOR DELETE USING (user_email = current_setting('request.headers.x-user-email', true));
    END IF;
  END IF;
END $$;

-- Optional: seed an admin/user for initial testing (comment out in production)
-- insert into public."Users" (email) values ('you@example.com') on conflict (email) do nothing;
